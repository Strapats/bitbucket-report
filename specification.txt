Script Specification for Year-End Report of Git Commits, Pull Requests, and File Changes in Bitbucket Cloud

1. Overview

The purpose of this script is to generate a year-end report summarizing all development activity in the company’s Bitbucket Cloud repositories. The report will include the number of commits, pull requests (PRs), and file changes across all repositories in a Bitbucket workspace. It will aggregate data per repository and display it visually to showcase the development department’s yearly contributions.

2. Goals
	•	Fetch data from all repositories in a Bitbucket Cloud workspace.
	•	Aggregate data:
	•	Total commits per month, repository, and workspace.
	•	Total pull requests (created, merged) per month.
	•	Total file changes (lines added/removed).
	•	Generate visualizations:
	•	Monthly trend of commits, PRs, and file changes.
	•	Contribution per repository.
	•	Overall development activity summary for the year.
	•	Export the data and visualizations as:
	•	CSV for tabular data.
	•	PDF or HTML for visual reports.

3. Functional Requirements

3.1 Data Fetching

The script must connect to the Bitbucket Cloud API to fetch data. The following endpoints will be used:
	1.	Repositories: List all repositories in the workspace.
	•	Endpoint: GET /2.0/repositories/{workspace}
	2.	Commits: Retrieve commits for each repository.
	•	Endpoint: GET /2.0/repositories/{workspace}/{repo_slug}/commits
	3.	Pull Requests: Fetch pull request details.
	•	Endpoint: GET /2.0/repositories/{workspace}/{repo_slug}/pullrequests
	4.	Diffstat: Fetch file changes (lines added/removed).
	•	Endpoint: GET /2.0/repositories/{workspace}/{repo_slug}/diffstat/{commit_id}

Data Points to Fetch

For each repository:
	•	Total commits:
	•	Count per month.
	•	Pull requests:
	•	Total created PRs.
	•	Total merged PRs.
	•	File changes:
	•	Lines added.
	•	Lines removed.

Authentication
	•	Use Basic Authentication with Bitbucket App Passwords.

3.2 Data Aggregation

The script must aggregate the fetched data:
	1.	Monthly Aggregation:
	•	Total commits per month across all repositories.
	•	Total pull requests (created, merged) per month.
	•	Total file changes (lines added/removed) per month.
	2.	Repository-Level Aggregation:
	•	Total commits, PRs, and file changes for each repository.
	3.	Workspace-Level Summary:
	•	Grand totals for commits, PRs, and file changes for the year.

3.3 Data Visualization

The script must generate visualizations using a suitable library (e.g., Matplotlib or Plotly):
	1.	Monthly Activity Chart:
	•	Line chart showing commits, PRs, and file changes over the months.
	2.	Repository Contributions:
	•	Bar chart for the top repositories by total commits and PRs.
	3.	File Changes Summary:
	•	Stacked bar chart for lines added vs. removed per month.
	4.	Overall Summary:
	•	Pie chart of repository contributions (commits).

3.4 Data Export
	•	CSV Export: Export aggregated data as CSV files.
	•	PDF/HTML Report: Export visualizations and summary data in a structured report.

4. Non-Functional Requirements
	•	Performance: Handle large amounts of data with pagination support for Bitbucket APIs.
	•	Error Handling: Handle network errors, authentication issues, and API rate limits.
	•	Scalability: Work for any number of repositories in the workspace.
	•	Automation: Support reusability with configuration options (workspace, year, output path).

5. Script Structure
	1.	Configuration:
	•	API credentials (workspace, username, app password).
	•	Year for the report (default to the current year).
	•	Output paths for CSVs and visualizations.
	2.	Data Fetching:
	•	Fetch repositories list.
	•	Fetch commits, pull requests, and diffstat for each repository.
	3.	Data Aggregation:
	•	Aggregate commits, PRs, and file changes monthly and by repository.
	4.	Visualization:
	•	Generate charts for:
	•	Monthly activity trends.
	•	Repository contributions.
	•	File changes summary.
	5.	Export:
	•	Save aggregated data to CSV.
	•	Generate a PDF/HTML report with visualizations.

6. Script Example Workflow
	1.	Fetch repositories in the workspace.
	2.	For each repository:
	•	Fetch commits and group them by month.
	•	Fetch pull requests and classify as created/merged.
	•	Fetch file changes for each commit to calculate lines added/removed.
	3.	Aggregate all data into monthly and repository-level summaries.
	4.	Generate visualizations:
	•	Line chart for monthly trends.
	•	Bar charts for repository contributions.
	•	Stacked bar for file changes.
	5.	Save:
	•	CSV files with raw and aggregated data.
	•	Visual report as PDF/HTML.

7. Example Output

7.1 CSV Data
	•	yearly_commits.csv
	•	yearly_pull_requests.csv
	•	yearly_file_changes.csv

Month	Repository	Commits	PRs Created	PRs Merged	Lines Added	Lines Removed
2024-01	repo-a	120	10	8	5,000	2,300
2024-01	repo-b	90	6	5	3,200	1,000

7.2 Visualizations
	1.	Line Chart: Commits, PRs, and file changes over the year.
	2.	Bar Chart: Top 10 repositories by commit count.
	3.	Pie Chart: Contribution distribution by repository.
	4.	Stacked Bar Chart: Lines added vs. removed per month.

8. Required Tools and Libraries
	•	Language: Python
	•	Libraries:
	•	requests for API calls.
	•	pandas for data aggregation.
	•	matplotlib/plotly for visualization.
	•	reportlab or weasyprint for PDF generation.

9. Configuration Parameters

Parameter	Description	Default Value
workspace	Bitbucket workspace name	None
username	Bitbucket username	None
app_password	Bitbucket app password	None
year	Report year	Current year
output_folder	Folder for CSVs and visualizations	./output

10. Summary

This specification defines a script to generate a comprehensive year-end report for all repositories in a Bitbucket Cloud workspace. The script will fetch, aggregate, and visualize development activity data (commits, pull requests, and file changes) and produce an exportable report.